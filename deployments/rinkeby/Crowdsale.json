{
  "address": "0xd18869a6fbf4FD6e89f4880563B66155276174C2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_bustadWallet",
          "type": "address"
        },
        {
          "internalType": "contract BustadToken",
          "name": "_bustadToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialRate",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_acceptedStableCoins",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinAddress",
          "type": "address"
        }
      ],
      "name": "AddAcceptedStableCoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinAddress",
          "type": "address"
        }
      ],
      "name": "RemoveAcceptedStableCoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedStableCoins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        }
      ],
      "name": "addAcceptedStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bustadToken",
      "outputs": [
        {
          "internalType": "contract BustadToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bustadWallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount18based",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableCoinAddress",
          "type": "address"
        }
      ],
      "name": "buyWithStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestETHPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "isAcceptableStableCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        }
      ],
      "name": "removeAcceptedStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract BustadToken",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setBustadToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "setBustadWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xffcdedaa58a33073ca6275c607c8ac9f6072725415a227bf781f8f2d76ef3fe9",
  "receipt": {
    "to": null,
    "from": "0x14701438d1e2A4BE2578158D26F027ea4e99dA6c",
    "contractAddress": "0xd18869a6fbf4FD6e89f4880563B66155276174C2",
    "transactionIndex": 23,
    "gasUsed": "2942704",
    "logsBloom": "0x
    "blockHash": "0x830ab618ce25ff1885646d09fd91b812155b28296ea5e7e37b98118008e6d5bb",
    "transactionHash": "0xffcdedaa58a33073ca6275c607c8ac9f6072725415a227bf781f8f2d76ef3fe9",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 10857778,
        "transactionHash": "0xffcdedaa58a33073ca6275c607c8ac9f6072725415a227bf781f8f2d76ef3fe9",
        "address": "0xd18869a6fbf4FD6e89f4880563B66155276174C2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000014701438d1e2a4be2578158d26f027ea4e99da6c",
          "0x00000000000000000000000014701438d1e2a4be2578158d26f027ea4e99da6c"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x830ab618ce25ff1885646d09fd91b812155b28296ea5e7e37b98118008e6d5bb"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 10857778,
        "transactionHash": "0xffcdedaa58a33073ca6275c607c8ac9f6072725415a227bf781f8f2d76ef3fe9",
        "address": "0xd18869a6fbf4FD6e89f4880563B66155276174C2",
        "topics": [
          "0x2c3a081e527e7fad437be1177b7c622088946b54c354903df0c5fdcf4a712e3e",
          "0x0000000000000000000000005592ec0cfb4dbc12d3ab100b257153436a1f0fea"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x830ab618ce25ff1885646d09fd91b812155b28296ea5e7e37b98118008e6d5bb"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 10857778,
        "transactionHash": "0xffcdedaa58a33073ca6275c607c8ac9f6072725415a227bf781f8f2d76ef3fe9",
        "address": "0xd18869a6fbf4FD6e89f4880563B66155276174C2",
        "topics": [
          "0x2c3a081e527e7fad437be1177b7c622088946b54c354903df0c5fdcf4a712e3e",
          "0x0000000000000000000000004dbcdf9b62e891a7cec5a2568c3f4faf9e8abe2b"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x830ab618ce25ff1885646d09fd91b812155b28296ea5e7e37b98118008e6d5bb"
      }
    ],
    "blockNumber": 10857778,
    "cumulativeGasUsed": "8026241",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4C22a285896e500aB8A85fc372e56F2C990794c3",
    "0x2B4CE707f642cf7D3AA599530042F0be488B28E7",
    "1000000000000000000",
    [
      "0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa",
      "0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b"
    ],
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "08cb536c46baba9db5126db64d525d61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_bustadWallet\",\"type\":\"address\"},{\"internalType\":\"contract BustadToken\",\"name\":\"_bustadToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_acceptedStableCoins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"AddAcceptedStableCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"RemoveAcceptedStableCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedStableCoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"addAcceptedStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bustadToken\",\"outputs\":[{\"internalType\":\"contract BustadToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bustadWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount18based\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableCoinAddress\",\"type\":\"address\"}],\"name\":\"buyWithStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"isAcceptableStableCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"removeAcceptedStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BustadToken\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setBustadToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"setBustadWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Crowdsale.sol\":\"Crowdsale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {        \\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x86990c136d3771740b0081d5f72d1a483b37524bbd7f1f35a7ede71b0a612b28\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/BustadToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"./WithFee.sol\\\";\\n\\ncontract BustadToken is ERC20, ERC20Burnable, AccessControl, WithFee, Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    address public feeCollector;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        uint256 transferFee,\\n        uint256 mintingFee,\\n        address _feeCollector,\\n        FeeType transferFeeType,\\n        FeeType mintingFeeType\\n    )\\n        ERC20(name, symbol)\\n        WithFee(transferFee, mintingFee, transferFeeType, mintingFeeType)\\n    {\\n        require(_feeCollector != address(0), \\\"feeCollector is zero address\\\");\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _mint(msg.sender, initialSupply);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        uint256 mintingFee = _calculateMintingFee(amount);\\n        amount -= mintingFee;\\n\\n        if (mintingFee > 0) {\\n            _mint(feeCollector, mintingFee);\\n        }\\n\\n        _mint(to, amount);\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        address owner = _msgSender();\\n        uint256 transferFee = _calculateTransferFee(amount);\\n\\n        amount -= transferFee;\\n\\n        if (transferFee > 0) {\\n            _transfer(owner, feeCollector, transferFee);\\n        }\\n\\n        _transfer(owner, to, amount);\\n\\n        return true;\\n    }\\n\\n    function setFeeCollector(address _feeCollector)\\n        external\\n        onlyRole(MAINTAINER_ROLE)\\n    {\\n        feeCollector = _feeCollector;\\n    }\\n\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function calculateMintingFee(uint256 amount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calculateMintingFee(amount);\\n    }\\n\\n    function setMintingFee(uint256 _fee) external onlyRole(MAINTAINER_ROLE) {\\n        _setMintingFee(_fee);\\n    }\\n\\n    function setMintingFeeType(FeeType feeType)\\n        external\\n        onlyRole(MAINTAINER_ROLE)\\n    {\\n        _setMintingFeeType(feeType);\\n    }\\n\\n    function setTransferFee(uint256 _fee) external onlyRole(MAINTAINER_ROLE) {\\n        _setTransferFee(_fee);\\n    }\\n\\n    function setTransferFeeType(FeeType _feeType)\\n        external\\n        onlyRole(MAINTAINER_ROLE)\\n    {\\n        _setTransferFeeType(_feeType);\\n    }\\n\\n    function getMintingFee() external view returns (uint256) {\\n        return _mintingFee;\\n    }\\n\\n    function getTransferFee() external view returns (uint256) {\\n        return _transferFee;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xbca51b296c891c60b80ffdaac191533a74c13348ef4fba06656a8a1c6e63ad16\",\"license\":\"MIT\"},\"contracts/Crowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./BustadToken.sol\\\";\\n\\nabstract contract IERC20Extended is IERC20 {\\n    function decimals() public view virtual returns (uint8);\\n}\\n\\ncontract Crowdsale is Context, ReentrancyGuard, AccessControl, Pausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20Extended;\\n\\n    BustadToken public bustadToken;\\n    AggregatorV3Interface internal priceFeed;\\n\\n    address payable public bustadWallet;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    mapping(address => bool) public acceptedStableCoins;\\n\\n    uint256 public rate;\\n\\n    event TokensMinted(address indexed purchaser, uint256 amount);\\n    event AddAcceptedStableCoin(address indexed coinAddress);\\n    event RemoveAcceptedStableCoin(address indexed coinAddress);\\n\\n    constructor(\\n        address payable _bustadWallet,\\n        BustadToken _bustadToken,\\n        uint256 _initialRate,\\n        address[] memory _acceptedStableCoins,\\n        address _priceFeedAddress\\n    ) {\\n        require(_bustadWallet != address(0), \\\"Wallet is the zero address\\\");\\n        require(\\n            address(_bustadToken) != address(0),\\n            \\\"bustadToken is the zero address\\\"\\n        );\\n        require(_initialRate > 0, \\\"Rate cannot be 0\\\");\\n\\n        bustadWallet = _bustadWallet;\\n        bustadToken = _bustadToken;\\n        rate = _initialRate;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        _initializeAcceptableStableCoin(_acceptedStableCoins);\\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\\n    }\\n\\n    receive() external payable {}\\n\\n    function buyWithETH() external payable nonReentrant whenNotPaused {\\n        address buyer = msg.sender;\\n\\n        _preValidatePurchase(buyer, msg.value);\\n\\n        int256 ethUSDPrice = getLatestETHPrice();\\n\\n        uint256 ethAmountInUSD = (uint256(ethUSDPrice) * msg.value) / 1e18;\\n\\n        (bool success, ) = bustadWallet.call{value: msg.value}(\\\"\\\");\\n\\n        if (success) {\\n            uint256 amountToMint = _getTokenAmount(ethAmountInUSD);\\n            _mint(buyer, amountToMint);\\n            emit TokensMinted(_msgSender(), amountToMint);\\n        } else {\\n            revert(\\\"Could not send to bustadWallet\\\");\\n        }\\n    }\\n\\n    function buyWithStableCoin(uint256 amount18based, address stableCoinAddress)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(\\n            acceptedStableCoins[stableCoinAddress] == true,\\n            \\\"Token not accepted\\\"\\n        );\\n\\n        IERC20Extended coin = IERC20Extended(stableCoinAddress);\\n\\n        address buyer = msg.sender;\\n\\n        _preValidatePurchase(buyer, amount18based);\\n\\n        uint256 coinAmount = _toCoinAmount(amount18based, coin);\\n\\n        coin.safeTransferFrom(buyer, address(this), coinAmount);\\n\\n        coin.transfer(address(bustadWallet), coinAmount);\\n\\n        uint256 amountToMint = _getTokenAmount(amount18based);\\n\\n        _mint(buyer, amountToMint);\\n\\n        emit TokensMinted(_msgSender(), amountToMint);\\n    }\\n\\n    function getLatestETHPrice() public view returns (int256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return price * 1e10;\\n    }\\n\\n    function setRate(uint256 newRate) external onlyRole(MAINTAINER_ROLE) {\\n        rate = newRate;\\n    }\\n\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function addAcceptedStableCoin(address _stableCoin)\\n        external\\n        onlyRole(MAINTAINER_ROLE)\\n    {\\n        acceptedStableCoins[_stableCoin] = true;\\n        emit AddAcceptedStableCoin(_stableCoin);\\n    }\\n\\n    function removeAcceptedStableCoin(address _stableCoin)\\n        external\\n        onlyRole(MAINTAINER_ROLE)\\n    {\\n        acceptedStableCoins[_stableCoin] = false;\\n        emit RemoveAcceptedStableCoin(_stableCoin);\\n    }\\n\\n    function isAcceptableStableCoin(address coin) external view returns (bool) {\\n        return acceptedStableCoins[coin];\\n    }\\n\\n    function setBustadWallet(address payable walletAddress)\\n        external\\n        onlyRole(MAINTAINER_ROLE)\\n    {\\n        bustadWallet = walletAddress;\\n    }\\n\\n    function setBustadToken(BustadToken _token)\\n        external\\n        onlyRole(MAINTAINER_ROLE)\\n    {\\n        bustadToken = _token;\\n    }\\n\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount)\\n        internal\\n        view\\n        virtual\\n    {\\n        require(\\n            beneficiary != address(0),\\n            \\\"Beneficiary is the zero address\\\"\\n        );\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\n        this;\\n    }\\n\\n    /**\\n     * @param weiAmount Value in wei to be converted into amountToMint\\n     * @return Number of amountToMint that can be purchased with the specified _weiAmount\\n     */\\n    function _getTokenAmount(uint256 weiAmount) private view returns (uint256) {\\n        return weiAmount.mul(rate) / 1 ether;\\n    }\\n\\n    function _mint(address to, uint256 tokenAmount) private {\\n        bustadToken.mint(to, tokenAmount);\\n    }\\n\\n    function _initializeAcceptableStableCoin(address[] memory addresses)\\n        private\\n    {\\n        for (uint8 i = 0; i < addresses.length; i++) {\\n            acceptedStableCoins[addresses[i]] = true;\\n            emit AddAcceptedStableCoin(addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts from 18 based decimal system to another coins decimal value.\\n     * Ex. USDC has decimal = 6, and needs to be treated as such.\\n     * @param amount original amount in wei\\n     * @param coin coin with decimal value\\n     */\\n    function _toCoinAmount(uint256 amount, IERC20Extended coin)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return (amount / 1e18) * (10**coin.decimals());\\n    }\\n\\n    /**\\n     * @dev Converts back to 18 based decimal system.\\n     * Ex. USDC has decimal = 6, and needs to be treated as such.\\n     * @param coinAmount amount based on the coin's decimal\\n     * @param coin coin with decimal value\\n     */\\n    function _fromCoinAmount(uint256 coinAmount, IERC20Extended coin)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return (coinAmount / (10**coin.decimals())) * 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xc3a10e08258a3e4a5fea51800bac6a39889232c8dd306fb88e7d57e26bad8676\",\"license\":\"MIT\"},\"contracts/WithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract WithFee {\\n    uint256 internal _transferFee;\\n    uint256 internal _mintingFee;\\n\\n    FeeType internal _transferFeeType;\\n    FeeType internal _mintingFeeType;\\n\\n    enum FeeType {\\n        Percentage,\\n        Fixed\\n    }\\n\\n    constructor(\\n        uint256 transferFee,\\n        uint256 mintingFee,\\n        FeeType transferFeeType,\\n        FeeType mintingFeeType\\n    ) {\\n        _transferFee = transferFee;\\n        _mintingFee = mintingFee;\\n        _transferFeeType = transferFeeType;\\n        _mintingFeeType = mintingFeeType;\\n    }\\n\\n    function _calculateMintingFee(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_mintingFeeType == FeeType.Percentage) {\\n            return (amount * _mintingFee) / 1 ether;\\n        }\\n        return _mintingFee;\\n    }\\n\\n    function _setMintingFee(uint256 fee) internal {\\n        _mintingFee = fee;\\n    }\\n\\n    function _setMintingFeeType(FeeType feeType) internal {\\n        _mintingFeeType = feeType;\\n    }\\n\\n    function _calculateTransferFee(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_transferFeeType == FeeType.Percentage) {\\n            return (amount * _transferFee) / 1 ether;\\n        }\\n        return _transferFee;\\n    }\\n\\n    function _setTransferFee(uint256 fee) internal {\\n        _transferFee = fee;\\n    }\\n\\n    function _setTransferFeeType(FeeType feeType) internal {\\n        _transferFeeType = feeType;\\n    }\\n}\\n\",\"keccak256\":\"0x62334f3d09a2e1d93ade2b7bdb6d3dad73a6832d7a7ddde932073be88b0b576b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003ad538038062003ad58339818101604052810190620000379190620007b3565b60016000819055506000600260006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415620000cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c490620008bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562000140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000137906200092d565b60405180910390fd5b6000831162000186576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017d906200099f565b60405180910390fd5b84600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600681905550620002246000801b336200028160201b60201c565b62000235826200029760201b60201c565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000a5b565b6200029382826200039c60201b60201c565b5050565b60005b81518160ff1610156200039857600160056000848460ff1681518110620002c657620002c5620009c1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550818160ff1681518110620003385762000337620009c1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f2c3a081e527e7fad437be1177b7c622088946b54c354903df0c5fdcf4a712e3e60405160405180910390a280806200038f9062000a2c565b9150506200029a565b5050565b620003ae82826200048d60201b60201c565b6200048957600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200042e620004f860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005418262000514565b9050919050565b620005538162000534565b81146200055f57600080fd5b50565b600081519050620005738162000548565b92915050565b6000620005868262000514565b9050919050565b60006200059a8262000579565b9050919050565b620005ac816200058d565b8114620005b857600080fd5b50565b600081519050620005cc81620005a1565b92915050565b6000819050919050565b620005e781620005d2565b8114620005f357600080fd5b50565b6000815190506200060781620005dc565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200065d8262000612565b810181811067ffffffffffffffff821117156200067f576200067e62000623565b5b80604052505050565b60006200069462000500565b9050620006a2828262000652565b919050565b600067ffffffffffffffff821115620006c557620006c462000623565b5b602082029050602081019050919050565b600080fd5b620006e68162000579565b8114620006f257600080fd5b50565b6000815190506200070681620006db565b92915050565b6000620007236200071d84620006a7565b62000688565b90508083825260208201905060208402830185811115620007495762000748620006d6565b5b835b81811015620007765780620007618882620006f5565b8452602084019350506020810190506200074b565b5050509392505050565b600082601f8301126200079857620007976200060d565b5b8151620007aa8482602086016200070c565b91505092915050565b600080600080600060a08688031215620007d257620007d16200050a565b5b6000620007e28882890162000562565b9550506020620007f588828901620005bb565b94505060406200080888828901620005f6565b935050606086015167ffffffffffffffff8111156200082c576200082b6200050f565b5b6200083a8882890162000780565b92505060806200084d88828901620006f5565b9150509295509295909350565b600082825260208201905092915050565b7f57616c6c657420697320746865207a65726f2061646472657373000000000000600082015250565b6000620008a3601a836200085a565b9150620008b0826200086b565b602082019050919050565b60006020820190508181036000830152620008d68162000894565b9050919050565b7f627573746164546f6b656e20697320746865207a65726f206164647265737300600082015250565b600062000915601f836200085a565b91506200092282620008dd565b602082019050919050565b60006020820190508181036000830152620009488162000906565b9050919050565b7f526174652063616e6e6f74206265203000000000000000000000000000000000600082015250565b6000620009876010836200085a565b915062000994826200094f565b602082019050919050565b60006020820190508181036000830152620009ba8162000978565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600062000a398262000a1f565b915060ff82141562000a505762000a4f620009f0565b5b600182019050919050565b61306a8062000a6b6000396000f3fe60806040526004361061016a5760003560e01c80638456cb59116100d1578063cf3b023d1161008a578063dff5bf8d11610064578063dff5bf8d146104fe578063e2ccdafb14610529578063e63ab1e914610552578063f87422541461057d57610171565b8063cf3b023d1461046d578063d1a5f00f14610498578063d547741f146104d557610171565b80638456cb591461035f57806391d14854146103765780639f27c9dd146103b3578063a217fddf146103dc578063af50593e14610407578063afc0f1051461043057610171565b806336568abe1161012357806336568abe146102775780633cafbb6d146102a05780633f4ba83a146102c95780635c975abb146102e0578063777e0d861461030b5780637843e8e11461033657610171565b806301ffc9a714610176578063150d283d146101b3578063248a9ca3146101bd5780632c4e722e146101fa5780632f2ff15d1461022557806334fcf4371461024e57610171565b3661017157005b600080fd5b34801561018257600080fd5b5061019d60048036038101906101989190611d77565b6105a8565b6040516101aa9190611dbf565b60405180910390f35b6101bb610622565b005b3480156101c957600080fd5b506101e460048036038101906101df9190611e10565b610845565b6040516101f19190611e4c565b60405180910390f35b34801561020657600080fd5b5061020f610865565b60405161021c9190611e80565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190611ef9565b61086b565b005b34801561025a57600080fd5b5061027560048036038101906102709190611f65565b610894565b005b34801561028357600080fd5b5061029e60048036038101906102999190611ef9565b6108d1565b005b3480156102ac57600080fd5b506102c760048036038101906102c29190611f92565b610954565b005b3480156102d557600080fd5b506102de610a25565b005b3480156102ec57600080fd5b506102f5610a62565b6040516103029190611dbf565b60405180910390f35b34801561031757600080fd5b50610320610a79565b60405161032d9190611fd8565b60405180910390f35b34801561034257600080fd5b5061035d60048036038101906103589190611ff3565b610b39565b005b34801561036b57600080fd5b50610374610ddd565b005b34801561038257600080fd5b5061039d60048036038101906103989190611ef9565b610e1a565b6040516103aa9190611dbf565b60405180910390f35b3480156103bf57600080fd5b506103da60048036038101906103d59190611f92565b610e85565b005b3480156103e857600080fd5b506103f1610f56565b6040516103fe9190611e4c565b60405180910390f35b34801561041357600080fd5b5061042e60048036038101906104299190612071565b610f5d565b005b34801561043c57600080fd5b5061045760048036038101906104529190611f92565b610fd4565b6040516104649190611dbf565b60405180910390f35b34801561047957600080fd5b50610482610ff4565b60405161048f91906120ad565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba9190611f92565b61101a565b6040516104cc9190611dbf565b60405180910390f35b3480156104e157600080fd5b506104fc60048036038101906104f79190611ef9565b611070565b005b34801561050a57600080fd5b50610513611099565b6040516105209190612127565b60405180910390f35b34801561053557600080fd5b50610550600480360381019061054b9190612180565b6110bf565b005b34801561055e57600080fd5b50610567611136565b6040516105749190611e4c565b60405180910390f35b34801561058957600080fd5b5061059261115a565b60405161059f9190611e4c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061b575061061a8261117e565b5b9050919050565b60026000541415610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f9061220a565b60405180910390fd5b6002600081905550610678610a62565b156106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af90612276565b60405180910390fd5b60003390506106c781346111e8565b60006106d1610a79565b90506000670de0b6b3a764000034836106ea91906122c5565b6106f4919061234e565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163460405161073e906123b0565b60006040518083038185875af1925050503d806000811461077b576040519150601f19603f3d011682016040523d82523d6000602084013e610780565b606091505b5050905080156107fc576000610795836112a0565b90506107a185826112d1565b6107a9611364565b73ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a4273826040516107ee9190611e80565b60405180910390a250610837565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90612411565b60405180910390fd5b505050506001600081905550565b600060016000838152602001908152602001600020600101549050919050565b60065481565b61087482610845565b61088581610880611364565b61136c565b61088f8383611409565b505050565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956108c6816108c1611364565b61136c565b816006819055505050565b6108d9611364565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d906124a3565b60405180910390fd5b61095082826114e9565b5050565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9561098681610981611364565b61136c565b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2c3a081e527e7fad437be1177b7c622088946b54c354903df0c5fdcf4a712e3e60405160405180910390a25050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610a5781610a52611364565b61136c565b610a5f6115cb565b50565b6000600260009054906101000a900460ff16905090565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190612546565b5050509150506402540be40081610b3391906125c1565b91505090565b60026000541415610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b769061220a565b60405180910390fd5b6002600081905550610b8f610a62565b15610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690612276565b60405180910390fd5b60011515600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5990612724565b60405180910390fd5b60008190506000339050610c7681856111e8565b6000610c82858461166d565b9050610cb18230838673ffffffffffffffffffffffffffffffffffffffff1661171f909392919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610d0e929190612753565b602060405180830381600087803b158015610d2857600080fd5b505af1158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6091906127a8565b506000610d6c866112a0565b9050610d7883826112d1565b610d80611364565b73ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a427382604051610dc59190611e80565b60405180910390a25050505060016000819055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610e0f81610e0a611364565b61136c565b610e176117a8565b50565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610eb781610eb2611364565b61136c565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2721da2c7980d1ff584a9b10d17c82ac2fd1df99662427e03619a9035cd4d65f60405160405180910390a25050565b6000801b81565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610f8f81610f8a611364565b61136c565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60056020528060005260406000206000915054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61107982610845565b61108a81611085611364565b61136c565b61109483836114e9565b505050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956110f1816110ec611364565b61136c565b81600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f90612821565b60405180910390fd5b600081141561129c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112939061288d565b60405180910390fd5b5050565b6000670de0b6b3a76400006112c06006548461184b90919063ffffffff16565b6112ca919061234e565b9050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b815260040161132e929190612753565b600060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b505050505050565b600033905090565b6113768282610e1a565b6114055761139b8173ffffffffffffffffffffffffffffffffffffffff166014611861565b6113a98360001c6020611861565b6040516020016113ba9291906129bf565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fc9190612a43565b60405180910390fd5b5050565b6114138282610e1a565b6114e557600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061148a611364565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6114f38282610e1a565b156115c75760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061156c611364565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6115d3610a62565b611612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160990612ab1565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611656611364565b6040516116639190612ad1565b60405180910390a1565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b557600080fd5b505afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190612b25565b600a6116f99190612c85565b670de0b6b3a76400008461170d919061234e565b61171791906122c5565b905092915050565b6117a2846323b872dd60e01b85858560405160240161174093929190612cd0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a9d565b50505050565b6117b0610a62565b156117f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e790612276565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611834611364565b6040516118419190612ad1565b60405180910390a1565b6000818361185991906122c5565b905092915050565b60606000600283600261187491906122c5565b61187e9190612d07565b67ffffffffffffffff81111561189757611896612d5d565b5b6040519080825280601f01601f1916602001820160405280156118c95781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061190157611900612d8c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061196557611964612d8c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026119a591906122c5565b6119af9190612d07565b90505b6001811115611a4f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106119f1576119f0612d8c565b5b1a60f81b828281518110611a0857611a07612d8c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611a4890612dbb565b90506119b2565b5060008414611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a90612e31565b60405180910390fd5b8091505092915050565b6000611aff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b649092919063ffffffff16565b9050600081511115611b5f5780806020019051810190611b1f91906127a8565b611b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5590612ec3565b60405180910390fd5b5b505050565b6060611b738484600085611b7c565b90509392505050565b606082471015611bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb890612f55565b60405180910390fd5b611bca85611c90565b611c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0090612fc1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c32919061301d565b60006040518083038185875af1925050503d8060008114611c6f576040519150601f19603f3d011682016040523d82523d6000602084013e611c74565b606091505b5091509150611c84828286611cb3565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611cc357829050611d13565b600083511115611cd65782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a9190612a43565b60405180910390fd5b9392505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d5481611d1f565b8114611d5f57600080fd5b50565b600081359050611d7181611d4b565b92915050565b600060208284031215611d8d57611d8c611d1a565b5b6000611d9b84828501611d62565b91505092915050565b60008115159050919050565b611db981611da4565b82525050565b6000602082019050611dd46000830184611db0565b92915050565b6000819050919050565b611ded81611dda565b8114611df857600080fd5b50565b600081359050611e0a81611de4565b92915050565b600060208284031215611e2657611e25611d1a565b5b6000611e3484828501611dfb565b91505092915050565b611e4681611dda565b82525050565b6000602082019050611e616000830184611e3d565b92915050565b6000819050919050565b611e7a81611e67565b82525050565b6000602082019050611e956000830184611e71565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ec682611e9b565b9050919050565b611ed681611ebb565b8114611ee157600080fd5b50565b600081359050611ef381611ecd565b92915050565b60008060408385031215611f1057611f0f611d1a565b5b6000611f1e85828601611dfb565b9250506020611f2f85828601611ee4565b9150509250929050565b611f4281611e67565b8114611f4d57600080fd5b50565b600081359050611f5f81611f39565b92915050565b600060208284031215611f7b57611f7a611d1a565b5b6000611f8984828501611f50565b91505092915050565b600060208284031215611fa857611fa7611d1a565b5b6000611fb684828501611ee4565b91505092915050565b6000819050919050565b611fd281611fbf565b82525050565b6000602082019050611fed6000830184611fc9565b92915050565b6000806040838503121561200a57612009611d1a565b5b600061201885828601611f50565b925050602061202985828601611ee4565b9150509250929050565b600061203e82611e9b565b9050919050565b61204e81612033565b811461205957600080fd5b50565b60008135905061206b81612045565b92915050565b60006020828403121561208757612086611d1a565b5b60006120958482850161205c565b91505092915050565b6120a781612033565b82525050565b60006020820190506120c2600083018461209e565b92915050565b6000819050919050565b60006120ed6120e86120e384611e9b565b6120c8565b611e9b565b9050919050565b60006120ff826120d2565b9050919050565b6000612111826120f4565b9050919050565b61212181612106565b82525050565b600060208201905061213c6000830184612118565b92915050565b600061214d82611ebb565b9050919050565b61215d81612142565b811461216857600080fd5b50565b60008135905061217a81612154565b92915050565b60006020828403121561219657612195611d1a565b5b60006121a48482850161216b565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006121f4601f836121ad565b91506121ff826121be565b602082019050919050565b60006020820190508181036000830152612223816121e7565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006122606010836121ad565b915061226b8261222a565b602082019050919050565b6000602082019050818103600083015261228f81612253565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122d082611e67565b91506122db83611e67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561231457612313612296565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061235982611e67565b915061236483611e67565b9250826123745761237361231f565b5b828204905092915050565b600081905092915050565b50565b600061239a60008361237f565b91506123a58261238a565b600082019050919050565b60006123bb8261238d565b9150819050919050565b7f436f756c64206e6f742073656e6420746f2062757374616457616c6c65740000600082015250565b60006123fb601e836121ad565b9150612406826123c5565b602082019050919050565b6000602082019050818103600083015261242a816123ee565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061248d602f836121ad565b915061249882612431565b604082019050919050565b600060208201905081810360008301526124bc81612480565b9050919050565b600069ffffffffffffffffffff82169050919050565b6124e2816124c3565b81146124ed57600080fd5b50565b6000815190506124ff816124d9565b92915050565b61250e81611fbf565b811461251957600080fd5b50565b60008151905061252b81612505565b92915050565b60008151905061254081611f39565b92915050565b600080600080600060a0868803121561256257612561611d1a565b5b6000612570888289016124f0565b95505060206125818882890161251c565b945050604061259288828901612531565b93505060606125a388828901612531565b92505060806125b4888289016124f0565b9150509295509295909350565b60006125cc82611fbf565b91506125d783611fbf565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561261657612615612296565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561265357612652612296565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156126905761268f612296565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156126cd576126cc612296565b5b828202905092915050565b7f546f6b656e206e6f742061636365707465640000000000000000000000000000600082015250565b600061270e6012836121ad565b9150612719826126d8565b602082019050919050565b6000602082019050818103600083015261273d81612701565b9050919050565b61274d81611ebb565b82525050565b60006040820190506127686000830185612744565b6127756020830184611e71565b9392505050565b61278581611da4565b811461279057600080fd5b50565b6000815190506127a28161277c565b92915050565b6000602082840312156127be576127bd611d1a565b5b60006127cc84828501612793565b91505092915050565b7f42656e656669636961727920697320746865207a65726f206164647265737300600082015250565b600061280b601f836121ad565b9150612816826127d5565b602082019050919050565b6000602082019050818103600083015261283a816127fe565b9050919050565b7f43726f776473616c653a20776569416d6f756e74206973203000000000000000600082015250565b60006128776019836121ad565b915061288282612841565b602082019050919050565b600060208201905081810360008301526128a68161286a565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006128ee6017836128ad565b91506128f9826128b8565b601782019050919050565b600081519050919050565b60005b8381101561292d578082015181840152602081019050612912565b8381111561293c576000848401525b50505050565b600061294d82612904565b61295781856128ad565b935061296781856020860161290f565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006129a96011836128ad565b91506129b482612973565b601182019050919050565b60006129ca826128e1565b91506129d68285612942565b91506129e18261299c565b91506129ed8284612942565b91508190509392505050565b6000601f19601f8301169050919050565b6000612a1582612904565b612a1f81856121ad565b9350612a2f81856020860161290f565b612a38816129f9565b840191505092915050565b60006020820190508181036000830152612a5d8184612a0a565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612a9b6014836121ad565b9150612aa682612a65565b602082019050919050565b60006020820190508181036000830152612aca81612a8e565b9050919050565b6000602082019050612ae66000830184612744565b92915050565b600060ff82169050919050565b612b0281612aec565b8114612b0d57600080fd5b50565b600081519050612b1f81612af9565b92915050565b600060208284031215612b3b57612b3a611d1a565b5b6000612b4984828501612b10565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115612ba957808604811115612b8557612b84612296565b5b6001851615612b945780820291505b8081029050612ba285612b52565b9450612b69565b94509492505050565b600082612bc25760019050612c7e565b81612bd05760009050612c7e565b8160018114612be65760028114612bf057612c1f565b6001915050612c7e565b60ff841115612c0257612c01612296565b5b8360020a915084821115612c1957612c18612296565b5b50612c7e565b5060208310610133831016604e8410600b8410161715612c545782820a905083811115612c4f57612c4e612296565b5b612c7e565b612c618484846001612b5f565b92509050818404811115612c7857612c77612296565b5b81810290505b9392505050565b6000612c9082611e67565b9150612c9b83612aec565b9250612cc87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612bb2565b905092915050565b6000606082019050612ce56000830186612744565b612cf26020830185612744565b612cff6040830184611e71565b949350505050565b6000612d1282611e67565b9150612d1d83611e67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d5257612d51612296565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612dc682611e67565b91506000821415612dda57612dd9612296565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612e1b6020836121ad565b9150612e2682612de5565b602082019050919050565b60006020820190508181036000830152612e4a81612e0e565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612ead602a836121ad565b9150612eb882612e51565b604082019050919050565b60006020820190508181036000830152612edc81612ea0565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612f3f6026836121ad565b9150612f4a82612ee3565b604082019050919050565b60006020820190508181036000830152612f6e81612f32565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612fab601d836121ad565b9150612fb682612f75565b602082019050919050565b60006020820190508181036000830152612fda81612f9e565b9050919050565b600081519050919050565b6000612ff782612fe1565b613001818561237f565b935061301181856020860161290f565b80840191505092915050565b60006130298284612fec565b91508190509291505056fea26469706673582212202e36dae02342455003fc120401eb95765f488f8bbe3d8ec140ab6012d7432f0c64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c80638456cb59116100d1578063cf3b023d1161008a578063dff5bf8d11610064578063dff5bf8d146104fe578063e2ccdafb14610529578063e63ab1e914610552578063f87422541461057d57610171565b8063cf3b023d1461046d578063d1a5f00f14610498578063d547741f146104d557610171565b80638456cb591461035f57806391d14854146103765780639f27c9dd146103b3578063a217fddf146103dc578063af50593e14610407578063afc0f1051461043057610171565b806336568abe1161012357806336568abe146102775780633cafbb6d146102a05780633f4ba83a146102c95780635c975abb146102e0578063777e0d861461030b5780637843e8e11461033657610171565b806301ffc9a714610176578063150d283d146101b3578063248a9ca3146101bd5780632c4e722e146101fa5780632f2ff15d1461022557806334fcf4371461024e57610171565b3661017157005b600080fd5b34801561018257600080fd5b5061019d60048036038101906101989190611d77565b6105a8565b6040516101aa9190611dbf565b60405180910390f35b6101bb610622565b005b3480156101c957600080fd5b506101e460048036038101906101df9190611e10565b610845565b6040516101f19190611e4c565b60405180910390f35b34801561020657600080fd5b5061020f610865565b60405161021c9190611e80565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190611ef9565b61086b565b005b34801561025a57600080fd5b5061027560048036038101906102709190611f65565b610894565b005b34801561028357600080fd5b5061029e60048036038101906102999190611ef9565b6108d1565b005b3480156102ac57600080fd5b506102c760048036038101906102c29190611f92565b610954565b005b3480156102d557600080fd5b506102de610a25565b005b3480156102ec57600080fd5b506102f5610a62565b6040516103029190611dbf565b60405180910390f35b34801561031757600080fd5b50610320610a79565b60405161032d9190611fd8565b60405180910390f35b34801561034257600080fd5b5061035d60048036038101906103589190611ff3565b610b39565b005b34801561036b57600080fd5b50610374610ddd565b005b34801561038257600080fd5b5061039d60048036038101906103989190611ef9565b610e1a565b6040516103aa9190611dbf565b60405180910390f35b3480156103bf57600080fd5b506103da60048036038101906103d59190611f92565b610e85565b005b3480156103e857600080fd5b506103f1610f56565b6040516103fe9190611e4c565b60405180910390f35b34801561041357600080fd5b5061042e60048036038101906104299190612071565b610f5d565b005b34801561043c57600080fd5b5061045760048036038101906104529190611f92565b610fd4565b6040516104649190611dbf565b60405180910390f35b34801561047957600080fd5b50610482610ff4565b60405161048f91906120ad565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba9190611f92565b61101a565b6040516104cc9190611dbf565b60405180910390f35b3480156104e157600080fd5b506104fc60048036038101906104f79190611ef9565b611070565b005b34801561050a57600080fd5b50610513611099565b6040516105209190612127565b60405180910390f35b34801561053557600080fd5b50610550600480360381019061054b9190612180565b6110bf565b005b34801561055e57600080fd5b50610567611136565b6040516105749190611e4c565b60405180910390f35b34801561058957600080fd5b5061059261115a565b60405161059f9190611e4c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061b575061061a8261117e565b5b9050919050565b60026000541415610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f9061220a565b60405180910390fd5b6002600081905550610678610a62565b156106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af90612276565b60405180910390fd5b60003390506106c781346111e8565b60006106d1610a79565b90506000670de0b6b3a764000034836106ea91906122c5565b6106f4919061234e565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163460405161073e906123b0565b60006040518083038185875af1925050503d806000811461077b576040519150601f19603f3d011682016040523d82523d6000602084013e610780565b606091505b5050905080156107fc576000610795836112a0565b90506107a185826112d1565b6107a9611364565b73ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a4273826040516107ee9190611e80565b60405180910390a250610837565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90612411565b60405180910390fd5b505050506001600081905550565b600060016000838152602001908152602001600020600101549050919050565b60065481565b61087482610845565b61088581610880611364565b61136c565b61088f8383611409565b505050565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956108c6816108c1611364565b61136c565b816006819055505050565b6108d9611364565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d906124a3565b60405180910390fd5b61095082826114e9565b5050565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9561098681610981611364565b61136c565b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2c3a081e527e7fad437be1177b7c622088946b54c354903df0c5fdcf4a712e3e60405160405180910390a25050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610a5781610a52611364565b61136c565b610a5f6115cb565b50565b6000600260009054906101000a900460ff16905090565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190612546565b5050509150506402540be40081610b3391906125c1565b91505090565b60026000541415610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b769061220a565b60405180910390fd5b6002600081905550610b8f610a62565b15610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690612276565b60405180910390fd5b60011515600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5990612724565b60405180910390fd5b60008190506000339050610c7681856111e8565b6000610c82858461166d565b9050610cb18230838673ffffffffffffffffffffffffffffffffffffffff1661171f909392919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610d0e929190612753565b602060405180830381600087803b158015610d2857600080fd5b505af1158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6091906127a8565b506000610d6c866112a0565b9050610d7883826112d1565b610d80611364565b73ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a427382604051610dc59190611e80565b60405180910390a25050505060016000819055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610e0f81610e0a611364565b61136c565b610e176117a8565b50565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610eb781610eb2611364565b61136c565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2721da2c7980d1ff584a9b10d17c82ac2fd1df99662427e03619a9035cd4d65f60405160405180910390a25050565b6000801b81565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610f8f81610f8a611364565b61136c565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60056020528060005260406000206000915054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61107982610845565b61108a81611085611364565b61136c565b61109483836114e9565b505050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956110f1816110ec611364565b61136c565b81600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f90612821565b60405180910390fd5b600081141561129c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112939061288d565b60405180910390fd5b5050565b6000670de0b6b3a76400006112c06006548461184b90919063ffffffff16565b6112ca919061234e565b9050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b815260040161132e929190612753565b600060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b505050505050565b600033905090565b6113768282610e1a565b6114055761139b8173ffffffffffffffffffffffffffffffffffffffff166014611861565b6113a98360001c6020611861565b6040516020016113ba9291906129bf565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fc9190612a43565b60405180910390fd5b5050565b6114138282610e1a565b6114e557600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061148a611364565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6114f38282610e1a565b156115c75760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061156c611364565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6115d3610a62565b611612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160990612ab1565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611656611364565b6040516116639190612ad1565b60405180910390a1565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b557600080fd5b505afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190612b25565b600a6116f99190612c85565b670de0b6b3a76400008461170d919061234e565b61171791906122c5565b905092915050565b6117a2846323b872dd60e01b85858560405160240161174093929190612cd0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a9d565b50505050565b6117b0610a62565b156117f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e790612276565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611834611364565b6040516118419190612ad1565b60405180910390a1565b6000818361185991906122c5565b905092915050565b60606000600283600261187491906122c5565b61187e9190612d07565b67ffffffffffffffff81111561189757611896612d5d565b5b6040519080825280601f01601f1916602001820160405280156118c95781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061190157611900612d8c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061196557611964612d8c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026119a591906122c5565b6119af9190612d07565b90505b6001811115611a4f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106119f1576119f0612d8c565b5b1a60f81b828281518110611a0857611a07612d8c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611a4890612dbb565b90506119b2565b5060008414611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a90612e31565b60405180910390fd5b8091505092915050565b6000611aff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b649092919063ffffffff16565b9050600081511115611b5f5780806020019051810190611b1f91906127a8565b611b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5590612ec3565b60405180910390fd5b5b505050565b6060611b738484600085611b7c565b90509392505050565b606082471015611bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb890612f55565b60405180910390fd5b611bca85611c90565b611c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0090612fc1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c32919061301d565b60006040518083038185875af1925050503d8060008114611c6f576040519150601f19603f3d011682016040523d82523d6000602084013e611c74565b606091505b5091509150611c84828286611cb3565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611cc357829050611d13565b600083511115611cd65782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a9190612a43565b60405180910390fd5b9392505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d5481611d1f565b8114611d5f57600080fd5b50565b600081359050611d7181611d4b565b92915050565b600060208284031215611d8d57611d8c611d1a565b5b6000611d9b84828501611d62565b91505092915050565b60008115159050919050565b611db981611da4565b82525050565b6000602082019050611dd46000830184611db0565b92915050565b6000819050919050565b611ded81611dda565b8114611df857600080fd5b50565b600081359050611e0a81611de4565b92915050565b600060208284031215611e2657611e25611d1a565b5b6000611e3484828501611dfb565b91505092915050565b611e4681611dda565b82525050565b6000602082019050611e616000830184611e3d565b92915050565b6000819050919050565b611e7a81611e67565b82525050565b6000602082019050611e956000830184611e71565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ec682611e9b565b9050919050565b611ed681611ebb565b8114611ee157600080fd5b50565b600081359050611ef381611ecd565b92915050565b60008060408385031215611f1057611f0f611d1a565b5b6000611f1e85828601611dfb565b9250506020611f2f85828601611ee4565b9150509250929050565b611f4281611e67565b8114611f4d57600080fd5b50565b600081359050611f5f81611f39565b92915050565b600060208284031215611f7b57611f7a611d1a565b5b6000611f8984828501611f50565b91505092915050565b600060208284031215611fa857611fa7611d1a565b5b6000611fb684828501611ee4565b91505092915050565b6000819050919050565b611fd281611fbf565b82525050565b6000602082019050611fed6000830184611fc9565b92915050565b6000806040838503121561200a57612009611d1a565b5b600061201885828601611f50565b925050602061202985828601611ee4565b9150509250929050565b600061203e82611e9b565b9050919050565b61204e81612033565b811461205957600080fd5b50565b60008135905061206b81612045565b92915050565b60006020828403121561208757612086611d1a565b5b60006120958482850161205c565b91505092915050565b6120a781612033565b82525050565b60006020820190506120c2600083018461209e565b92915050565b6000819050919050565b60006120ed6120e86120e384611e9b565b6120c8565b611e9b565b9050919050565b60006120ff826120d2565b9050919050565b6000612111826120f4565b9050919050565b61212181612106565b82525050565b600060208201905061213c6000830184612118565b92915050565b600061214d82611ebb565b9050919050565b61215d81612142565b811461216857600080fd5b50565b60008135905061217a81612154565b92915050565b60006020828403121561219657612195611d1a565b5b60006121a48482850161216b565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006121f4601f836121ad565b91506121ff826121be565b602082019050919050565b60006020820190508181036000830152612223816121e7565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006122606010836121ad565b915061226b8261222a565b602082019050919050565b6000602082019050818103600083015261228f81612253565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122d082611e67565b91506122db83611e67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561231457612313612296565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061235982611e67565b915061236483611e67565b9250826123745761237361231f565b5b828204905092915050565b600081905092915050565b50565b600061239a60008361237f565b91506123a58261238a565b600082019050919050565b60006123bb8261238d565b9150819050919050565b7f436f756c64206e6f742073656e6420746f2062757374616457616c6c65740000600082015250565b60006123fb601e836121ad565b9150612406826123c5565b602082019050919050565b6000602082019050818103600083015261242a816123ee565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061248d602f836121ad565b915061249882612431565b604082019050919050565b600060208201905081810360008301526124bc81612480565b9050919050565b600069ffffffffffffffffffff82169050919050565b6124e2816124c3565b81146124ed57600080fd5b50565b6000815190506124ff816124d9565b92915050565b61250e81611fbf565b811461251957600080fd5b50565b60008151905061252b81612505565b92915050565b60008151905061254081611f39565b92915050565b600080600080600060a0868803121561256257612561611d1a565b5b6000612570888289016124f0565b95505060206125818882890161251c565b945050604061259288828901612531565b93505060606125a388828901612531565b92505060806125b4888289016124f0565b9150509295509295909350565b60006125cc82611fbf565b91506125d783611fbf565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561261657612615612296565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561265357612652612296565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156126905761268f612296565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156126cd576126cc612296565b5b828202905092915050565b7f546f6b656e206e6f742061636365707465640000000000000000000000000000600082015250565b600061270e6012836121ad565b9150612719826126d8565b602082019050919050565b6000602082019050818103600083015261273d81612701565b9050919050565b61274d81611ebb565b82525050565b60006040820190506127686000830185612744565b6127756020830184611e71565b9392505050565b61278581611da4565b811461279057600080fd5b50565b6000815190506127a28161277c565b92915050565b6000602082840312156127be576127bd611d1a565b5b60006127cc84828501612793565b91505092915050565b7f42656e656669636961727920697320746865207a65726f206164647265737300600082015250565b600061280b601f836121ad565b9150612816826127d5565b602082019050919050565b6000602082019050818103600083015261283a816127fe565b9050919050565b7f43726f776473616c653a20776569416d6f756e74206973203000000000000000600082015250565b60006128776019836121ad565b915061288282612841565b602082019050919050565b600060208201905081810360008301526128a68161286a565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006128ee6017836128ad565b91506128f9826128b8565b601782019050919050565b600081519050919050565b60005b8381101561292d578082015181840152602081019050612912565b8381111561293c576000848401525b50505050565b600061294d82612904565b61295781856128ad565b935061296781856020860161290f565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006129a96011836128ad565b91506129b482612973565b601182019050919050565b60006129ca826128e1565b91506129d68285612942565b91506129e18261299c565b91506129ed8284612942565b91508190509392505050565b6000601f19601f8301169050919050565b6000612a1582612904565b612a1f81856121ad565b9350612a2f81856020860161290f565b612a38816129f9565b840191505092915050565b60006020820190508181036000830152612a5d8184612a0a565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612a9b6014836121ad565b9150612aa682612a65565b602082019050919050565b60006020820190508181036000830152612aca81612a8e565b9050919050565b6000602082019050612ae66000830184612744565b92915050565b600060ff82169050919050565b612b0281612aec565b8114612b0d57600080fd5b50565b600081519050612b1f81612af9565b92915050565b600060208284031215612b3b57612b3a611d1a565b5b6000612b4984828501612b10565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115612ba957808604811115612b8557612b84612296565b5b6001851615612b945780820291505b8081029050612ba285612b52565b9450612b69565b94509492505050565b600082612bc25760019050612c7e565b81612bd05760009050612c7e565b8160018114612be65760028114612bf057612c1f565b6001915050612c7e565b60ff841115612c0257612c01612296565b5b8360020a915084821115612c1957612c18612296565b5b50612c7e565b5060208310610133831016604e8410600b8410161715612c545782820a905083811115612c4f57612c4e612296565b5b612c7e565b612c618484846001612b5f565b92509050818404811115612c7857612c77612296565b5b81810290505b9392505050565b6000612c9082611e67565b9150612c9b83612aec565b9250612cc87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612bb2565b905092915050565b6000606082019050612ce56000830186612744565b612cf26020830185612744565b612cff6040830184611e71565b949350505050565b6000612d1282611e67565b9150612d1d83611e67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d5257612d51612296565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612dc682611e67565b91506000821415612dda57612dd9612296565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612e1b6020836121ad565b9150612e2682612de5565b602082019050919050565b60006020820190508181036000830152612e4a81612e0e565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612ead602a836121ad565b9150612eb882612e51565b604082019050919050565b60006020820190508181036000830152612edc81612ea0565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612f3f6026836121ad565b9150612f4a82612ee3565b604082019050919050565b60006020820190508181036000830152612f6e81612f32565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612fab601d836121ad565b9150612fb682612f75565b602082019050919050565b60006020820190508181036000830152612fda81612f9e565b9050919050565b600081519050919050565b6000612ff782612fe1565b613001818561237f565b935061301181856020860161290f565b80840191505092915050565b60006130298284612fec565b91508190509291505056fea26469706673582212202e36dae02342455003fc120401eb95765f488f8bbe3d8ec140ab6012d7432f0c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 530,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 70,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 445,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2741,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "bustadToken",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(BustadToken)2705"
      },
      {
        "astId": 2744,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2746,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "bustadWallet",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 2760,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "acceptedStableCoins",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2762,
        "contract": "contracts/Crowdsale.sol:Crowdsale",
        "label": "rate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(BustadToken)2705": {
        "encoding": "inplace",
        "label": "contract BustadToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/Crowdsale.sol:Crowdsale",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/Crowdsale.sol:Crowdsale",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}